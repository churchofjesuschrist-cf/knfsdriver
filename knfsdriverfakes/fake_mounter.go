// This file was generated by counterfeiter
package knfsdriverfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/lds-cf/knfsdriver/mounter"
)

type FakeMounter struct {
	MountStub        func(logger lager.Logger, ctx context.Context, source string, target string, fstype string, flags uintptr, mountMode int, mountOptions, principal, keytab string) ([]byte, error)
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		logger       lager.Logger
		ctx          context.Context
		source       string
		target       string
		fstype       string
		flags        uintptr
		mountMode    int
		mountOptions string
		principal    string
		keytab       string
	}
	mountReturns struct {
		result1 []byte
		result2 error
	}
	UnmountStub        func(logger lager.Logger, ctx context.Context, target string, flags int) (err error)
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		logger lager.Logger
		ctx    context.Context
		target string
		flags  int
	}
	unmountReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMounter) Mount(logger lager.Logger, ctx context.Context, source string, target string, fstype string, flags uintptr, mountMode int, mountOptions string, principal string, keytab string) ([]byte, error) {
	fake.mountMutex.Lock()
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		logger       lager.Logger
		ctx          context.Context
		source       string
		target       string
		fstype       string
		flags        uintptr
		mountMode    int
		mountOptions string
		principal    string
		keytab       string
	}{logger, ctx, source, target, fstype, flags, mountMode, mountOptions, principal, keytab})
	fake.recordInvocation("Mount", []interface{}{logger, ctx, source, target, fstype, flags, mountMode, mountOptions, principal, keytab})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(logger, ctx, source, target, fstype, flags, mountMode, mountOptions, principal, keytab)
	} else {
		return fake.mountReturns.result1, fake.mountReturns.result2
	}
}

func (fake *FakeMounter) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeMounter) MountArgsForCall(i int) (lager.Logger, context.Context, string, string, string, uintptr, int, string, string, string) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].logger, fake.mountArgsForCall[i].ctx, fake.mountArgsForCall[i].source, fake.mountArgsForCall[i].target, fake.mountArgsForCall[i].fstype, fake.mountArgsForCall[i].flags, fake.mountArgsForCall[i].mountMode, fake.mountArgsForCall[i].mountOptions, fake.mountArgsForCall[i].principal, fake.mountArgsForCall[i].keytab
}

func (fake *FakeMounter) MountReturns(result1 []byte, result2 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeMounter) Unmount(logger lager.Logger, ctx context.Context, target string, flags int) (err error) {
	fake.unmountMutex.Lock()
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		logger lager.Logger
		ctx    context.Context
		target string
		flags  int
	}{logger, ctx, target, flags})
	fake.recordInvocation("Unmount", []interface{}{logger, ctx, target, flags})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(logger, ctx, target, flags)
	} else {
		return fake.unmountReturns.result1
	}
}

func (fake *FakeMounter) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeMounter) UnmountArgsForCall(i int) (lager.Logger, context.Context, string, int) {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].logger, fake.unmountArgsForCall[i].ctx, fake.unmountArgsForCall[i].target, fake.unmountArgsForCall[i].flags
}

func (fake *FakeMounter) UnmountReturns(result1 error) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mounter.Mounter = new(FakeMounter)
