// This file was generated by counterfeiter
package nfsdriverfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/lds-cf/nfsdriver"
)

type FakeKerberizer struct {
	LoginStub        func(lager.Logger) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 lager.Logger
	}
	loginReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKerberizer) Login(arg1 lager.Logger) error {
	fake.loginMutex.Lock()
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("Login", []interface{}{arg1})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(arg1)
	} else {
		return fake.loginReturns.result1
	}
}

func (fake *FakeKerberizer) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeKerberizer) LoginArgsForCall(i int) lager.Logger {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.loginArgsForCall[i].arg1
}

func (fake *FakeKerberizer) LoginReturns(result1 error) {
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKerberizer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeKerberizer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nfsdriver.Kerberizer = new(FakeKerberizer)
